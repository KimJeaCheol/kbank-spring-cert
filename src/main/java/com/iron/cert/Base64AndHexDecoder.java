package com.iron.cert;

import java.util.Base64;

import jakarta.xml.bind.DatatypeConverter;

public class Base64AndHexDecoder {
    public static void main(String[] args) {
        // Base64 인코딩된 문자열
        String base64EncodedString = "SGVsbG8sIHdvcmxkIQ==";
        
        // Hexadecimal 문자열
        String hexEncodedString
        
        // Base64 디코더 객체 생성
        Base64.Decoder base64Decoder = Base64.getDecoder();
        
        // Base64 디코딩 수행
        byte[] base64DecodedBytes = base64Decoder.decode(base64EncodedString);
        String base64DecodedString = new String(base64DecodedBytes);
        
        // Hexadecimal 디코딩 수행
        byte[] hexDecodedBytes = DatatypeConverter.parseHexBinary(hexEncodedString);
        String hexDecodedString = new String(hexDecodedBytes);
        
        // 결과 출력
        // System.out.println("Base64 Encoded String: " + base64EncodedString);
        // System.out.println("Base64 Decoded String: " + base64DecodedString);
        
        // System.out.println("Hex Encoded String: " + hexEncodedString);
        //System.out.println("Hex Decoded String: " + hexDecodedString);

        byte[] binaryData = hexStringToByteArray(hexEncodedString);

        // 여기에서 binaryData를 사용하여 필요한 처리를 할 수 있습니다.
        // 예를 들어, 인증서 파싱 등의 작업을 수행할 수 있습니다.
        
        // binaryData 출력 예시
        for (byte b : binaryData) {
            System.out.printf("%02X ", b);
        }
    }

    // 16진수 문자열을 바이트 배열로 변환하는 메서드
    public static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                                    + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }
}
